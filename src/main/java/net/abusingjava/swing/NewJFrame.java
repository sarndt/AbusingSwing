/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package net.abusingjava.swing;

import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;

import javax.swing.BoxLayout;
import javax.swing.JCheckBox;
import javax.swing.JPanel;

/**
 *
 * @author scravy
 */
public class NewJFrame extends javax.swing.JFrame {

    private static final long serialVersionUID = 2639550843625655596L;
    

    public NewJFrame() {
        initComponents();
    }
    
    public static class JXCheckBox extends JCheckBox {
    	
    	private static final long serialVersionUID = -6466887398546764160L;

    	PropertyChangeSupport $x = null;
    	
		public boolean getSelected() {
			return isSelected();
		}
		
		@Override
		public void setSelected(final boolean $true) {
			boolean $oldValue = getSelected();
			super.setSelected($true);
			if ($x != null) {
				$x.firePropertyChange("selected", $oldValue, $true);
			}
			System.out.println("huhu");
		}
    			
		@Override
		public void addPropertyChangeListener(final PropertyChangeListener $ev) {
			if ($x == null) {
				addItemListener(new ItemListener() {

					@Override
					public void itemStateChanged(final ItemEvent $ev) {
						$x.firePropertyChange("selected", !getSelected(), getSelected());
					}

					
				});
				$x = new PropertyChangeSupport(this);
			}
			$x.addPropertyChangeListener($ev);
		}

		@Override
		public void removePropertyChangeListener(final PropertyChangeListener $ev) {
			if ($x == null) {
				$x = new PropertyChangeSupport(this);
			}
			$x.removePropertyChangeListener($ev);
		}

		@Override
		public PropertyChangeListener[] getPropertyChangeListeners() {
			if ($x == null) {
				$x = new PropertyChangeSupport(this);
			}
			return $x.getPropertyChangeListeners();
		}
    	
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings({"rawtypes"})
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        jCheckBox1 = new JXCheckBox();
        jCheckBox2 = new JXCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jCheckBox1.setText("jCheckBox1");

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jCheckBox2, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jCheckBox1, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        bindingGroup.addBinding(binding);

        jCheckBox2.setText("jCheckBox2");

        setContentPane(new JPanel());
        
        BoxLayout $layout = new BoxLayout(getContentPane(), BoxLayout.Y_AXIS);
        getContentPane().setLayout($layout);
        getContentPane().add(jCheckBox1);
        getContentPane().add(jCheckBox2);

        bindingGroup.bind();

        pack();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(final String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
			public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration
}
